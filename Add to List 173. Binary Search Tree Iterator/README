The idea here is to use a Stack data structure. We push the root and all the left most nodes
into the stack first. Once this is done, we pop the element and we point to the right element
of that popped element. If this popped element has any other left childs, add that to the stack
as well in addition to the popped element. Thus , for the hasNext function we simply need to check
if the stack is not empty. 
Let us understand through an example :  
         40
       /   \
     20     70
     / \   /  \
   10  30  60  80
       / \
      28  36
      
 We first put all the left most elements of root to a stack including the root. Thus our stack will contain 
 elements 10 , 20 and 40. We first pop 10 and return. Next when we pop 20, we check whether there is any right
 node of 20. As it is there, we push 30 and 28 to the stack. Now we pop 28 from the stack. Again , we pop 30 we
 see that there is a right child. We push 36 into the stack and so on and so forth.
