The idea is to sort based on the y values and then compare the current start to previous end. If the end is more,
we increment the count. At the end return the count. Let us take an example :
[ [1,2], [2,3], [3,4], [1,3] ]
After sorting the intervals would look like this:
[ [1,2], [2,3], [1,3] , [3,4]  ]
Here we first initialize end as 2 of the first interval. Next we start iterating from the 2nd interval.
As the start of 2nd interval is not less than 1st interval, we do not increment the count.
End is now set to 3 from 2nd interval. For the third interval as its start is  less than the end, 
we 't increment the count. Finally we compare 3 from 2nd interval to start of 4th interval. As it is not same,
we do not increment the count. Finally we return 1 as our answer.
