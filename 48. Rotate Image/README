The naive way to rotate a matrix is by allocation of a new matrix that takes extra space of O( n * n).
1 2 3    7 4 1 
4 5 6 => 8 5 2
7 8 9    9 6 3
If above one is our matrix to rotate, we can allocate another matrix of same size and then fill the new matrix according to the pattern 
that we require. Below is the coordinate representation of the matrix. As can be seen, element at position 00 in our new matrix will be element
at position 20 in our old matrix, element at 01 will be the element at index 10 and so on and so forth.
00 01 02    20 10 00
10 11 12 => 21 11 01
20 21 22    22 12 02
We can keep copying elements from old matrix to the new matrix and then at the end can assign back the values to the old matrix.

To reduce the space complexity, we can either transpose and swap the symmetry or swap the symmetry and transpose.

As explained in the following post we can swap and reverse or reverse and swap.
https://discuss.leetcode.com/topic/6796/a-common-method-to-rotate-the-image

The below example has been copied from the same source.
/*
 * clockwise rotate
 * first reverse up to down, then swap the symmetry 
 * 1 2 3     7 8 9     7 4 1
 * 4 5 6  => 4 5 6  => 8 5 2
 * 7 8 9     1 2 3     9 6 3
*/

/*
 * anticlockwise rotate
 * first reverse left to right, then swap the symmetry
 * 1 2 3     3 2 1     3 6 9
 * 4 5 6  => 6 5 4  => 2 5 8
 * 7 8 9     9 8 7     1 4 7
*/
